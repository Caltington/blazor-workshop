@page "/myorders"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject OrdersClient OrdersClient

<PageTitle>Slice Slice Baby - My Orders</PageTitle>

<div class="main" style="background-image: url(@image); background-size: cover; background-position: center;">
    <TemplatedList Loader="LoadOrders" ListGroupClass="orders-list">
        <Loading>Loading...</Loading>
        <Empty>
            <h2>No orders placed</h2>
            <a class="btn btn-success" href="">Order some pizza</a>
        </Empty>
        <Item Context="item">
                <div class="col">
                    <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                    Items:
                    <strong>@item.Order.Pizzas.Count()</strong>
                    Total: £
                    <strong>@item.Order.GetTotalPrice().ToString("F2")</strong>
                </div>
                <div class="col">
                    Status:<strong>@item.StatusText</strong>
                </div>
                <div class="col flex-grow-0">
                    <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                        Track &gt;
                    </a>
                </div>
        </Item>
    </TemplatedList>
</div>

@code {
    string image = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        var result = await HttpClient.GetAsync("https://foodish-api.com/api/images/pizza");
        image = (await result.Content.ReadFromJsonAsync<PizzaImage>()).image;
    }
    async Task<IEnumerable<OrderWithStatus>> LoadOrders()
    {
        var ordersWithStatus = Enumerable.Empty<OrderWithStatus>();
        try
        {
            ordersWithStatus = await OrdersClient.GetOrders();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        return ordersWithStatus;

    }

}
